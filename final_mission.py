""" import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from utils import show_image
from utils import display_hacking_graphics

# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ß‡πâ (ciphertext) ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
ciphertext = base64.b64decode("ekzO2yNTve1jhLKWpBoebA==")

# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
expected_plaintext = "Hello Hacker!!"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ AES Decryption
def final_decrypt(key, iv, ciphertext):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Cipher
        cipher = AES.new(key, AES.MODE_CBC, iv)
        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏•‡∏ö padding
        decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size).decode('utf-8')
        return decrypted
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Key ‡πÅ‡∏•‡∏∞ IV
def check_key_iv(key, iv):
    if len(key) != 16:
        print(f"Error: Key must be 16 bytes, but it is {len(key)} bytes.")
        return False
    if len(iv) != 16:
        print(f"Error: IV must be 16 bytes, but it is {len(iv)} bytes.")
        return False
    return True

def final_task():
    print("-" * 60)
    print("Your objective is to infiltrate the system, decrypt the secret message, and use the information to transfer funds from the bank.")
    
    while True:
        print("[Displaying hint for the Key...]")
        show_image("images/hint41.jpg")  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏£‡∏Å
        key_input = input("üîë Please enter the Key (16 bytes): ").encode('utf-8')
        
        print("[Displaying hint for the IV...]]")
        show_image("images/hint42.jpg")  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        iv_input = input("üóùÔ∏è Please enter the IV (16 bytes): ").encode('utf-8')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Key ‡πÅ‡∏•‡∏∞ IV
        if check_key_iv(key_input, iv_input):
            break  # ‡∏´‡∏≤‡∏Å Key ‡πÅ‡∏•‡∏∞ IV ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        print("‚ùå Hack failed: Incorrect Key or IV! Please try again.")

    # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    decrypted_text = final_decrypt(key_input, iv_input, ciphertext)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
    if decrypted_text:
        print(f"‚úÖ Decrypted message: {decrypted_text}")
        
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö expected_plaintext
    if decrypted_text == expected_plaintext:
        display_hacking_graphics()
        print("üí∏ You have successfully accessed the bank system!")
        print(f"üéâ Use Key: {key_input.decode('utf-8')} and IV: {iv_input.decode('utf-8')} to transfer funds from the system.")
        print("üìÑ Data has been recorded, and the transfer was successful.")
        return key_input, iv_input
    else:
        print("üö® [Hack failed!] Incorrect inputs.")
        return None, None

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
#if __name__ == "__main__":
#    final_task()

 """
import time
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from utils import show_image
from utils import display_hacking_graphics

# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ß‡πâ (ciphertext) ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
ciphertext = base64.b64decode("ekzO2yNTve1jhLKWpBoebA==")

# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
expected_plaintext = "Hello Hacker!!"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ AES Decryption
def final_decrypt(key, iv, ciphertext):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Cipher
        cipher = AES.new(key, AES.MODE_CBC, iv)
        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏•‡∏ö padding
        decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size).decode('utf-8')
        return decrypted
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Key ‡πÅ‡∏•‡∏∞ IV
def check_key_iv(key, iv):
    if len(key) != 16:
        print(f"Error: Key must be 16 bytes, but it is {len(key)} bytes.")
        return False
    if len(iv) != 16:
        print(f"Error: IV must be 16 bytes, but it is {len(iv)} bytes.")
        return False
    return True

def final_task():
    print("-" * 60)
    print("Your objective is to infiltrate the system, decrypt the secret message, and use the information to transfer funds from the bank.")
    
    while True:
        print("[Displaying hint for the Key...]")
        show_image("images/hint41.jpg")  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏£‡∏Å
        key_input = input("üîë Please enter the Key (16 bytes): ").encode('utf-8')
        
        print("[Displaying hint for the IV...]]")
        show_image("images/hint42.jpg")  # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        iv_input = input("üóùÔ∏è Please enter the IV (16 bytes): ").encode('utf-8')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Key ‡πÅ‡∏•‡∏∞ IV
        if check_key_iv(key_input, iv_input):
            break  # ‡∏´‡∏≤‡∏Å Key ‡πÅ‡∏•‡∏∞ IV ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        print("‚ùå Hack failed: Incorrect Key or IV! Please try again.")

    # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    decrypted_text = final_decrypt(key_input, iv_input, ciphertext)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
    #if decrypted_text:
        #print(f"‚úÖ Decrypted message: {decrypted_text}")
        
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö expected_plaintext
    if decrypted_text == expected_plaintext:
        #display_hacking_graphics()
        print("üí∏ You have successfully accessed the bank system!")
        print(f"üéâ Use Key: {key_input.decode('utf-8')} and IV: {iv_input.decode('utf-8')} to transfer funds from the system.")
        time.sleep(2)
        print("Find the last password that has been encrypted to proceed successfully using the provided KEY and IV!\n")
        print("Hint: The encryption mode that links each data block together, think of each block referencing the previous block.\n")
        time.sleep(1)
        print(f"This is encrypted password = ekzO2yNTve1jhLKWpBoebA==")
        passdecrypt=input("Please enter the decrypted password: ")
        if passdecrypt == expected_plaintext:
                display_hacking_graphics()
                print(f"üéâ It's correct! The lass password is: {passdecrypt}")
        print("üìÑ Data has been recorded, and the transfer was successful.")
        return key_input, iv_input, passdecrypt
    else:
        print("üö® [Hack failed!] Incorrect inputs.")
        return None, None

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if __name__ == "__main__":
    final_task()

